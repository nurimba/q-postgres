module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.pool = exports.types = exports.orm = undefined;
	
	var _promise = __webpack_require__(1);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _pg = __webpack_require__(4);
	
	var _orm = __webpack_require__(5);
	
	var _orm2 = _interopRequireDefault(_orm);
	
	var _types = __webpack_require__(12);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var orm = exports.orm = _orm2.default;
	var types = exports.types = _types2.default;
	
	var BEGIN = 'BEGIN';
	var COMMIT = 'COMMIT';
	var ROLLBACK = 'ROLLBACK';
	
	var getConnection = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(pool) {
	    var client, errno;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return pool.connect();
	
	          case 2:
	            client = _context.sent;
	            errno = client.errno;
	
	            if (!errno) {
	              _context.next = 6;
	              break;
	            }
	
	            throw new Error(client.message);
	
	          case 6:
	            return _context.abrupt('return', client);
	
	          case 7:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));
	
	  return function getConnection(_x) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var runSql = function runSql(client, sql) {
	  return new _promise2.default(function (resolve, reject) {
	    client.query(sql, function (err, result) {
	      if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'EXECUTE') console.log(err, result);
	      if (err) return reject(err);
	      resolve(result);
	    });
	  });
	};
	
	var factoryConnection = function () {
	  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(pool) {
	    var client, connection;
	    return _regenerator2.default.wrap(function _callee6$(_context6) {
	      while (1) {
	        switch (_context6.prev = _context6.next) {
	          case 0:
	            _context6.next = 2;
	            return getConnection(pool);
	
	          case 2:
	            client = _context6.sent;
	            connection = {
	              release: function () {
	                var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
	                  return _regenerator2.default.wrap(function _callee2$(_context2) {
	                    while (1) {
	                      switch (_context2.prev = _context2.next) {
	                        case 0:
	                          return _context2.abrupt('return', client.release());
	
	                        case 1:
	                        case 'end':
	                          return _context2.stop();
	                      }
	                    }
	                  }, _callee2, undefined);
	                }));
	
	                return function release() {
	                  return _ref3.apply(this, arguments);
	                };
	              }(),
	              execute: runSql.bind(undefined, client),
	
	              commit: function () {
	                var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
	                  return _regenerator2.default.wrap(function _callee3$(_context3) {
	                    while (1) {
	                      switch (_context3.prev = _context3.next) {
	                        case 0:
	                          _context3.next = 2;
	                          return runSql(client, COMMIT);
	
	                        case 2:
	                          return _context3.abrupt('return', connection);
	
	                        case 3:
	                        case 'end':
	                          return _context3.stop();
	                      }
	                    }
	                  }, _callee3, undefined);
	                }));
	
	                return function commit() {
	                  return _ref4.apply(this, arguments);
	                };
	              }(),
	
	              rollback: function () {
	                var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
	                  return _regenerator2.default.wrap(function _callee4$(_context4) {
	                    while (1) {
	                      switch (_context4.prev = _context4.next) {
	                        case 0:
	                          _context4.next = 2;
	                          return runSql(client, ROLLBACK);
	
	                        case 2:
	                          return _context4.abrupt('return', connection);
	
	                        case 3:
	                        case 'end':
	                          return _context4.stop();
	                      }
	                    }
	                  }, _callee4, undefined);
	                }));
	
	                return function rollback() {
	                  return _ref5.apply(this, arguments);
	                };
	              }(),
	
	              startTransaction: function () {
	                var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
	                  return _regenerator2.default.wrap(function _callee5$(_context5) {
	                    while (1) {
	                      switch (_context5.prev = _context5.next) {
	                        case 0:
	                          _context5.next = 2;
	                          return runSql(client, BEGIN);
	
	                        case 2:
	                          return _context5.abrupt('return', connection);
	
	                        case 3:
	                        case 'end':
	                          return _context5.stop();
	                      }
	                    }
	                  }, _callee5, undefined);
	                }));
	
	                return function startTransaction() {
	                  return _ref6.apply(this, arguments);
	                };
	              }()
	            };
	            return _context6.abrupt('return', connection);
	
	          case 5:
	          case 'end':
	            return _context6.stop();
	        }
	      }
	    }, _callee6, undefined);
	  }));
	
	  return function factoryConnection(_x2) {
	    return _ref2.apply(this, arguments);
	  };
	}();
	
	var pool = exports.pool = function pool(config) {
	  var pool = new _pg.Pool(config);
	  var connect = factoryConnection.bind(undefined, pool);
	  return { connect: connect };
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/promise");

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/regenerator");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("pg");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _extends2 = __webpack_require__(7);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _findById = __webpack_require__(8);
	
	var _findById2 = _interopRequireDefault(_findById);
	
	var _deleteById = __webpack_require__(16);
	
	var _deleteById2 = _interopRequireDefault(_deleteById);
	
	var _findByQuery = __webpack_require__(18);
	
	var _findByQuery2 = _interopRequireDefault(_findByQuery);
	
	var _countByQuery = __webpack_require__(19);
	
	var _countByQuery2 = _interopRequireDefault(_countByQuery);
	
	var _sqlUtils = __webpack_require__(15);
	
	var _createUpdate = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var joinORM = function joinORM(orm, schema, ref) {
	  schema.joins.push(ref);
	  return orm;
	};
	
	var addSelect = function addSelect(orm, schema, sel) {
	  schema.select.push(sel);
	  return orm;
	};
	
	var getORM = function getORM(schema, db) {
	  var orm = {
	    create: _createUpdate.insertRow.bind(undefined, schema, db),
	    findById: _findById2.default.bind(undefined, schema, db),
	    deleteById: _deleteById2.default.bind(undefined, schema, db),
	    updateById: _createUpdate.updateRowById.bind(undefined, schema, db),
	    findByQuery: _findByQuery2.default.bind(undefined, schema, db),
	    countByQuery: _countByQuery2.default.bind(undefined, schema, db)
	  };
	
	  orm.join = joinORM.bind(undefined, orm, schema);
	  orm.addSelect = addSelect.bind(undefined, orm, schema);
	  return orm;
	};
	
	var getModel = function getModel(schema, connection) {
	  var schemaModel = (0, _extends3.default)({}, schema);
	  if (!schemaModel.joins) schemaModel.joins = [];
	  if (!schemaModel.select) schemaModel.select = [];
	  return getORM(schemaModel, connection);
	};
	
	exports.default = function (schema) {
	  var fieldsTypes = (0, _sqlUtils.getFieldsTypes)(schema);
	  var schemaTypes = (0, _assign2.default)({ fieldsTypes: fieldsTypes }, schema);
	  return getModel.bind(undefined, schemaTypes);
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/object/assign");

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/extends");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _execute = __webpack_require__(9);
	
	var _execute2 = _interopRequireDefault(_execute);
	
	var _sqlSelect = __webpack_require__(13);
	
	var _sqlSelect2 = _interopRequireDefault(_sqlSelect);
	
	var _sqlUtils = __webpack_require__(15);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(schema, connection, value) {
	    var select, where, sql, rows;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            select = (0, _sqlUtils.objToListFields)(schema);
	            where = [{ field: 'id', comparator: '=', value: value }];
	            sql = (0, _sqlSelect2.default)((0, _assign2.default)({}, schema, { select: select, where: where }));
	
	            if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'FIND') console.log(sql);
	            _context.next = 6;
	            return (0, _execute2.default)(schema, connection, sql);
	
	          case 6:
	            rows = _context.sent;
	            return _context.abrupt('return', rows.pop());
	
	          case 8:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(1);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _keys = __webpack_require__(10);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _types = __webpack_require__(12);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DATE = _types2.default.DATE;
	var BOOLEAN = _types2.default.BOOLEAN;
	
	
	var getTyping = function getTyping(typing) {
	  if ((typeof typing === 'undefined' ? 'undefined' : (0, _typeof3.default)(typing)) === 'object') return typing.type;
	  return typing;
	};
	
	var formatDate = function formatDate(value) {
	  var dt = new Date(value);
	  var day = ('0' + dt.getDate()).substr(-2);
	  var mon = ('0' + (dt.getMonth() + 1)).substr(-2);
	  return dt.getFullYear() + '-' + mon + '-' + day;
	};
	
	var formatRow = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_ref2, row) {
	    var fields = _ref2.fields;
	    var count = _ref2.count;
	    var newRow;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            newRow = {};
	
	            if (!count) {
	              _context.next = 5;
	              break;
	            }
	
	            newRow['_counter'] = parseInt(row._counter || 0, 10);
	
	            if (!((0, _keys2.default)(row).length === 1)) {
	              _context.next = 5;
	              break;
	            }
	
	            return _context.abrupt('return', newRow);
	
	          case 5:
	
	            (0, _keys2.default)(fields).forEach(function (field) {
	              var value = row[field] || row[field.toLowerCase()];
	              newRow[field] = value;
	              var typing = getTyping(fields[field]);
	              if (typing === BOOLEAN) newRow[field] = Boolean(value);
	              if (value === null) return;
	              if (value === undefined) return;
	              if (typing === DATE) newRow[field] = formatDate(value);
	            });
	
	            return _context.abrupt('return', newRow);
	
	          case 7:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));
	
	  return function formatRow(_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	exports.default = function () {
	  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(schema, _ref4, sql) {
	    var execute = _ref4.execute;
	
	    var _ref5, rows;
	
	    return _regenerator2.default.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.next = 2;
	            return execute(sql);
	
	          case 2:
	            _ref5 = _context2.sent;
	            rows = _ref5.rows;
	            return _context2.abrupt('return', _promise2.default.all(rows.map(formatRow.bind(undefined, schema))));
	
	          case 5:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined);
	  }));
	
	  return function (_x3, _x4, _x5) {
	    return _ref3.apply(this, arguments);
	  };
	}();

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/object/keys");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/typeof");

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var TEXT = 'TEXT';
	var NAME = 'VARCHAR(255)';
	var DATE = 'DATE';
	var CHAR1 = 'CHAR(1)';
	var CHAR2 = 'CHAR(2)';
	var CHAR8 = 'CHAR(8)';
	var EMAIL = 'VARCHAR(50)';
	var PHONE = 'VARCHAR(30)';
	var MONEY = 'NUMERIC(15,2)';
	var STRING = 'VARCHAR(255)';
	var SELECT = 'VARCHAR(25)';
	var BOOLEAN = 'BOOLEAN';
	var INTEGER = 'INTEGER';
	var CPFCNPJ = 'VARCHAR(14)';
	var PERCENT = 'NUMERIC(15,8)';
	var PRIMARY = 'SERIAL NOT NULL';
	var DATETIME = 'TIMESTAMP';
	var REFERENCES = 'REFERENCES';
	
	exports.default = {
	  TEXT: TEXT,
	  DATE: DATE,
	  NAME: NAME,
	  CHAR1: CHAR1,
	  CHAR2: CHAR2,
	  CHAR8: CHAR8,
	  EMAIL: EMAIL,
	  PHONE: PHONE,
	  MONEY: MONEY,
	  STRING: STRING,
	  SELECT: SELECT,
	  BOOLEAN: BOOLEAN,
	  INTEGER: INTEGER,
	  CPFCNPJ: CPFCNPJ,
	  PERCENT: PERCENT,
	  PRIMARY: PRIMARY,
	  DATETIME: DATETIME,
	  REFERENCES: REFERENCES
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _sqlWhere = __webpack_require__(14);
	
	var _sqlWhere2 = _interopRequireDefault(_sqlWhere);
	
	var _sqlUtils = __webpack_require__(15);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var toSQL = function toSQL(_ref) {
	  var table = _ref.table;
	  var selectFields = _ref.selectFields;
	  var conditional = _ref.conditional;
	  var limitRows = _ref.limitRows;
	  var orderFields = _ref.orderFields;
	  var joinTables = _ref.joinTables;
	  var groupFields = _ref.groupFields;
	
	  var sql = '\nSELECT ' + selectFields + '\nFROM ' + table + '\n' + joinTables + '\n' + conditional + '\n' + groupFields + '\n' + orderFields + '\n' + limitRows + '\n';
	  while (sql.indexOf(_sqlUtils.blankLine) !== -1) {
	    sql = sql.replace(_sqlUtils.blankLine, _sqlUtils.breakLine);
	  }return sql.trim();
	};
	
	var pagination = function pagination(_ref2) {
	  var limit = _ref2.limit;
	  var page = _ref2.page;
	
	  if (!limit) return '';
	  if (!page) return 'LIMIT ' + limit;
	  var offset = (page - 1) * limit;
	  if (!offset) return 'LIMIT ' + limit;
	  return 'LIMIT ' + limit + ' OFFSET ' + offset;
	};
	
	var mapOrder = function mapOrder(select, table, count, seq) {
	  var field = seq.field;
	  var order = seq.order;
	
	  var tableName = seq.table || table;
	
	  var fieldSelect = select ? select.find(function (fd) {
	    var fieldTable = fd.table || table;
	    return fd.field === field && fieldTable === tableName;
	  }) : undefined;
	
	  if (!fieldSelect) return (tableName + '.' + field + ' ' + (order || '')).trim();
	
	  var posField = select.indexOf(fieldSelect) + 1;
	  if (count) posField++;
	  return (posField + ' ' + (order || '')).trim();
	};
	
	var orderByFields = function orderByFields(_ref3) {
	  var table = _ref3.table;
	  var select = _ref3.select;
	  var orderBy = _ref3.orderBy;
	  var count = _ref3.count;
	
	  if (!select) return '';
	  if (!orderBy) return '';
	
	  var mapOrderBy = mapOrder.bind(undefined, select, table, count);
	  var sequence = orderBy.map(mapOrderBy).join(', ');
	  return sequence ? 'ORDER BY ' + sequence : '';
	};
	
	var joinReferences = function joinReferences(_ref4) {
	  var joins = _ref4.joins;
	
	  if (!joins) return '';
	
	  return joins.map(function (join) {
	    var isString = typeof join === 'string';
	    if (isString) return join;
	    var tableRef = join.tableRef;
	    var fieldRef = join.fieldRef;
	    var tableLink = join.tableLink;
	    var fieldLink = join.fieldLink;
	
	    return 'JOIN ' + tableRef + ' ON (' + tableRef + '.' + fieldRef + ' = ' + tableLink + '.' + fieldLink + ')';
	  }).join(_sqlUtils.breakLine);
	};
	
	var filterSelect = function filterSelect(_ref5, _ref6) {
	  var grouping = _ref5.grouping;
	  var show = _ref6.show;
	  var func = _ref6.func;
	
	  if (grouping && func) return false;
	  return show === undefined || Boolean(show);
	};
	
	var mountFieldName = function mountFieldName(table, field, func) {
	  var fieldName = field[0].toUpperCase().concat(field.substring(1, field.length));
	  if (func) return func + '(' + table + '.' + field + ') AS ' + func.toLowerCase() + fieldName;
	  return table + '.' + field;
	};
	
	var mountFieldNameAlias = function mountFieldNameAlias(table, field, func) {
	  var fieldName = field[0].toUpperCase().concat(field.substring(1, field.length));
	  if (func) {
	    var tableName = table[0].toUpperCase().concat(table.substring(1, table.length));
	    return func + '(' + table + '.' + field + ') AS ' + func.toLowerCase() + tableName + fieldName;
	  }
	  return table + '.' + field + ' AS ' + table + fieldName;
	};
	
	var prepareSelect = function prepareSelect(schema) {
	  var select = schema.select;
	
	  if (!select) return [];
	  return select.filter(filterSelect.bind(undefined, schema)).map(function (conf) {
	    var table = schema.table;
	    var grouping = schema.grouping;
	    var field = conf.field;
	    var func = conf.func;
	
	    var tableName = conf.table || table;
	    if (grouping) return tableName + '.' + field;
	    if (tableName === table) return mountFieldName(tableName, field, func);
	    return mountFieldNameAlias(tableName, field, func);
	  });
	};
	
	var selFields = function selFields(_ref7) {
	  var table = _ref7.table;
	  var select = _ref7.select;
	  var count = _ref7.count;
	  var distinct = _ref7.distinct;
	
	  if (distinct && count) distinct = false;
	  var fields = prepareSelect({ select: select, table: table }).join(', ');
	  return count ? 'COUNT(-1) AS _counter' + (fields ? ', '.concat(fields) : '') : distinct ? 'DISTINCT ' + fields : fields;
	};
	
	var groupBy = function groupBy(_ref8) {
	  var select = _ref8.select;
	  var table = _ref8.table;
	  var count = _ref8.count;
	
	  if (!select) return '';
	  var grouping = true;
	  var fields = prepareSelect({ select: select, table: table, grouping: grouping }).join(', ');
	  var withFunc = Boolean(select && select.find(function (_ref9) {
	    var func = _ref9.func;
	    return Boolean(func);
	  }));
	  var withGroupBy = (count || withFunc) && fields;
	  if (withGroupBy) return 'GROUP BY ' + fields;
	  return '';
	};
	
	exports.default = function (schema) {
	  var selectFields = selFields(schema);
	  var orderFields = orderByFields(schema);
	  var joinTables = joinReferences(schema);
	  var conditional = (0, _sqlWhere2.default)(schema);
	  var limitRows = pagination(schema);
	  var groupFields = groupBy(schema);
	  return toSQL((0, _assign2.default)({ selectFields: selectFields, conditional: conditional, limitRows: limitRows, orderFields: orderFields, joinTables: joinTables, groupFields: groupFields }, schema));
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _sqlUtils = __webpack_require__(15);
	
	var orCondition = function orCondition(where, select, table) {
	  var cond = whereMap({ where: where, select: select, table: table }).join(')' + _sqlUtils.breakLine + '    OR (');
	  return cond ? '(' + cond + ')' : '';
	};
	
	var andCondition = function andCondition(where, select, table) {
	  var cond = whereMap({ where: where, select: select, table: table }).join(')' + _sqlUtils.breakLine + '   AND (');
	  return cond ? '(' + cond + ')' : '';
	};
	
	var verifyString = function verifyString(_ref) {
	  var select = _ref.select;
	  var field = _ref.field;
	  var tableName = _ref.tableName;
	  var fieldsTypes = _ref.fieldsTypes;
	
	  var isSelect = (select || []).find(function (sel) {
	    return sel.field === field && sel.table === tableName;
	  });
	  if (isSelect) return (0, _sqlUtils.fieldIsString)(select, field);
	  if (fieldsTypes) return (0, _sqlUtils.columnIsString)(fieldsTypes[tableName + '.' + field]);
	  false;
	};
	
	var whereMap = function whereMap(_ref2) {
	  var table = _ref2.table;
	  var where = _ref2.where;
	  var select = _ref2.select;
	  var fieldsTypes = _ref2.fieldsTypes;
	
	  var tableSchema = table;
	  return where.map(function (_ref3) {
	    var table = _ref3.table;
	    var field = _ref3.field;
	    var comparator = _ref3.comparator;
	    var value = _ref3.value;
	    var or = _ref3.or;
	    var and = _ref3.and;
	
	    var tableName = table || tableSchema;
	
	    if (or) return orCondition(or, select, tableName);
	    if (and) return andCondition(and, select, tableName);
	
	    var isString = verifyString({ select: select, field: field, tableName: tableName, fieldsTypes: fieldsTypes });
	    var val = isString ? '\'' + String(value).replace('\'', '\\\'').replace('"', '\\"') + '\'' : value;
	    return tableName + '.' + field + ' ' + comparator + ' ' + val;
	  });
	};
	
	exports.default = function (schema) {
	  if (!schema.where) return '';
	  var conditional = whereMap(schema).join(')' + _sqlUtils.breakLine + '  AND (');
	  return conditional ? 'WHERE (' + conditional + ')' : '';
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.condToWhereList = exports.objToListFields = exports.getFieldsTypes = exports.fieldIsString = exports.forceString = exports.getListFields = exports.getListReturning = exports.columnIsString = exports.stringTypes = exports.blankLine = exports.breakLine = undefined;
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _keys = __webpack_require__(10);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _types = __webpack_require__(12);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TEXT = _types2.default.TEXT;
	var DATE = _types2.default.DATE;
	var NAME = _types2.default.NAME;
	var CHAR1 = _types2.default.CHAR1;
	var CHAR2 = _types2.default.CHAR2;
	var CHAR8 = _types2.default.CHAR8;
	var EMAIL = _types2.default.EMAIL;
	var PHONE = _types2.default.PHONE;
	var STRING = _types2.default.STRING;
	var SELECT = _types2.default.SELECT;
	var CPFCNPJ = _types2.default.CPFCNPJ;
	var DATETIME = _types2.default.DATETIME;
	var REFERENCES = _types2.default.REFERENCES;
	var breakLine = exports.breakLine = '\n';
	var blankLine = exports.blankLine = '' + breakLine + breakLine;
	
	var stringTypes = exports.stringTypes = [TEXT, NAME, DATE, CHAR1, CHAR2, CHAR8, EMAIL, PHONE, STRING, SELECT, CPFCNPJ, DATETIME];
	
	var columnIsString = exports.columnIsString = function columnIsString(typing) {
	  var type = getType(typing);
	  return stringTypes.indexOf(type) > -1;
	};
	
	var getListReturning = exports.getListReturning = function getListReturning(_ref) {
	  var fields = _ref.fields;
	  return (0, _keys2.default)(fields).join(', ');
	};
	
	var getListFields = exports.getListFields = function getListFields(_ref2) {
	  var fields = _ref2.fields;
	  var data = _ref2.data;
	
	  return (0, _keys2.default)(fields).filter(function (field) {
	    return data.hasOwnProperty(field) && data[field] !== undefined;
	  });
	};
	
	var forceString = exports.forceString = function forceString(str) {
	  return '\'' + String(str).replace('\'', '\\\'').replace('"', '\\"') + '\'';
	};
	
	var fieldIsString = exports.fieldIsString = function fieldIsString(select, fieldName) {
	  return Boolean(select && select.find(function (_ref3) {
	    var field = _ref3.field;
	    var type = _ref3.type;
	
	    if (fieldName !== field) return false;
	    return stringTypes.indexOf(type) > -1;
	  }));
	};
	
	var getType = function getType(typing) {
	  if ((typeof typing === 'undefined' ? 'undefined' : (0, _typeof3.default)(typing)) === 'object') return typing.type;
	  return typing;
	};
	
	var getFieldsHasMany = function getFieldsHasMany(hasMany, fieldsTypes) {
	  if (!hasMany) return;
	  (0, _keys2.default)(hasMany).forEach(function (field) {
	    return getFieldsTypes(hasMany[field].schema, fieldsTypes);
	  });
	};
	
	var getFieldsManyToMany = function getFieldsManyToMany(manyToMany, fieldsTypes) {
	  if (!manyToMany) return;
	  (0, _keys2.default)(manyToMany).forEach(function (field) {
	    var _manyToMany$field = manyToMany[field];
	    var table = _manyToMany$field.table;
	    var extraFields = _manyToMany$field.extraFields;
	    var schema = _manyToMany$field.schema;
	
	    getFieldsTypes(schema, fieldsTypes);
	    getFieldsTypes({ table: table, fields: extraFields }, fieldsTypes);
	  });
	};
	
	var getFieldsTypes = exports.getFieldsTypes = function getFieldsTypes(schema, fieldsTypes) {
	  if (!fieldsTypes) fieldsTypes = { _tables: {} };
	  var table = schema.table;
	  var fields = schema.fields;
	  var hasMany = schema.hasMany;
	  var manyToMany = schema.manyToMany;
	
	  if (fieldsTypes._tables.hasOwnProperty(table)) return {};
	  fieldsTypes._tables[table] = null;
	
	  (0, _keys2.default)(fields).forEach(function (field) {
	    var type = getType(fields[field]);
	    fieldsTypes[table + '.' + field] = type;
	    if (type === REFERENCES) getFieldsTypes(fields[field].schema, fieldsTypes);
	  });
	
	  getFieldsHasMany(hasMany, fieldsTypes);
	  getFieldsManyToMany(manyToMany, fieldsTypes);
	
	  return fieldsTypes;
	};
	
	var leftOutFieldSelect = function leftOutFieldSelect(select, tableName, fieldName) {
	  return !select.find(function (_ref4) {
	    var field = _ref4.field;
	    var table = _ref4.table;
	    return field === fieldName && table === tableName;
	  });
	};
	
	var objToListFields = exports.objToListFields = function objToListFields(_ref5) {
	  var table = _ref5.table;
	  var fields = _ref5.fields;
	  var select = _ref5.select;
	
	  var fieldSelect = (select || []).map(function (sel) {
	    if (!sel.table) sel.table === table;
	    return sel;
	  });
	
	  var filterFields = leftOutFieldSelect.bind(undefined, fieldSelect, table);
	
	  return fieldSelect.concat((0, _keys2.default)(fields).filter(filterFields).map(function (field) {
	    var type = getType(fields[field]);
	    return { type: type, field: field, table: table };
	  }));
	};
	
	var comparators = {
	  eq: '=', // equal
	  lt: '<', // less than
	  gt: '>', // greater than
	  lq: '<=', // less or equal
	  gq: '>=', // greater or equal
	  df: '<>', // diference
	  lk: 'like' // = like by argument
	};
	
	var getComparatorValueCondition = function getComparatorValueCondition(conditions, condField) {
	  var value = conditions[condField];
	  var comparator = void 0;
	  var partsValue = value.split(':');
	  if (partsValue.length === 2) {
	    var comp = String(partsValue[0]).toLowerCase().trim();
	    if (comparators.hasOwnProperty(comp)) {
	      value = String(partsValue[1]).trim();
	      comparator = comparators[comp];
	      if (comparator === 'like') value = '%' + value + '%';
	    }
	  }
	
	  if (!comparator) comparator = '=';
	  return { value: value, comparator: comparator };
	};
	
	var getFieldTableCondition = function getFieldTableCondition(condField) {
	  var table = void 0;
	  var field = condField;
	  var partsField = condField.split('.');
	  if (partsField.length === 2) {
	    table = String(partsField[0]).trim();
	    field = String(partsField[1]).trim();
	  }
	
	  return { field: field, table: table };
	};
	
	var condToWhereList = exports.condToWhereList = function condToWhereList(conditions, whereList) {
	  if (!whereList) whereList = [];
	  var getComparatorValue = getComparatorValueCondition.bind(undefined, conditions);
	
	  (0, _keys2.default)(conditions).forEach(function (condField) {
	    var _getFieldTableConditi = getFieldTableCondition(condField);
	
	    var field = _getFieldTableConditi.field;
	    var table = _getFieldTableConditi.table;
	
	    var _getComparatorValue = getComparatorValue(condField);
	
	    var value = _getComparatorValue.value;
	    var comparator = _getComparatorValue.comparator;
	
	    whereList.push({ field: field, comparator: comparator, value: value, table: table });
	  });
	
	  return whereList;
	};
	
	// export const cloneDeep = (obj, ref = {}, cloneRef = {}) => {
	//   let copy
	//
	//   if (obj === null) return obj
	//   if (typeof obj !== 'object') return obj
	//
	//   if (obj instanceof Date) {
	//     copy = new Date()
	//     copy.setTime(obj.getTime())
	//     return copy
	//   }
	//
	//   if (obj instanceof Array) {
	//     copy = []
	//     for (let i = 0, len = obj.length; i < len; i++) copy[i] = cloneDeep(obj[i], ref, cloneRef)
	//     return copy
	//   }
	//
	//   if (obj instanceof Object) {
	//     if (ref[obj]) return cloneRef[obj]
	//     ref[obj] = true
	//     copy = {}
	//     cloneRef[obj] = copy
	//
	//     for (let attr in obj) {
	//       if (obj.hasOwnProperty(attr)) copy[attr] = cloneDeep(obj[attr], ref, cloneRef)
	//     }
	//
	//     return copy
	//   }
	//
	//   throw new Error('Unable to copy obj! Its type isn\'t supported.')
	// }

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _execute = __webpack_require__(9);
	
	var _execute2 = _interopRequireDefault(_execute);
	
	var _sqlDelete = __webpack_require__(17);
	
	var _sqlDelete2 = _interopRequireDefault(_sqlDelete);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(schema, connection, value) {
	    var where, sql;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            where = [{ field: 'id', comparator: '=', value: value }];
	            sql = (0, _sqlDelete2.default)((0, _assign2.default)({}, schema, { where: where }));
	
	            if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'DELETE') console.log(sql);
	            return _context.abrupt('return', (0, _execute2.default)(schema, connection, sql));
	
	          case 4:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _sqlWhere = __webpack_require__(14);
	
	var _sqlWhere2 = _interopRequireDefault(_sqlWhere);
	
	var _sqlUtils = __webpack_require__(15);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var toSQL = function toSQL(_ref) {
	  var table = _ref.table;
	  var conditional = _ref.conditional;
	  return ('\nDELETE FROM ' + table + '\n' + conditional + ';\n').trim();
	};
	
	exports.default = function (schema) {
	  var table = schema.table;
	  var fields = schema.fields;
	
	  var schemaWithSelect = (0, _assign2.default)({}, schema, { select: (0, _sqlUtils.objToListFields)({ fields: fields }) });
	  var conditional = (0, _sqlWhere2.default)(schemaWithSelect);
	  return toSQL({ table: table, conditional: conditional });
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _execute = __webpack_require__(9);
	
	var _execute2 = _interopRequireDefault(_execute);
	
	var _sqlSelect = __webpack_require__(13);
	
	var _sqlSelect2 = _interopRequireDefault(_sqlSelect);
	
	var _sqlUtils = __webpack_require__(15);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(schema, connection, conditions) {
	    var where, select, sql;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            where = (0, _sqlUtils.condToWhereList)(conditions);
	            select = (0, _sqlUtils.objToListFields)(schema);
	            sql = (0, _sqlSelect2.default)((0, _assign2.default)({}, schema, { select: select, where: where }));
	
	            if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'FIND') console.log(sql);
	            return _context.abrupt('return', (0, _execute2.default)(schema, connection, sql));
	
	          case 5:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _execute = __webpack_require__(9);
	
	var _execute2 = _interopRequireDefault(_execute);
	
	var _sqlSelect = __webpack_require__(13);
	
	var _sqlSelect2 = _interopRequireDefault(_sqlSelect);
	
	var _sqlUtils = __webpack_require__(15);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(schema, connection, conditions) {
	    var where, countSchema, sql, rows, row;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            where = (0, _sqlUtils.condToWhereList)(conditions);
	            countSchema = (0, _assign2.default)({}, schema, { where: where, count: true });
	            sql = (0, _sqlSelect2.default)(countSchema);
	
	            if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'COUNT') console.log(sql);
	            _context.next = 6;
	            return (0, _execute2.default)(countSchema, connection, sql);
	
	          case 6:
	            rows = _context.sent;
	            row = rows.pop();
	
	            if (row) {
	              _context.next = 10;
	              break;
	            }
	
	            return _context.abrupt('return', 0);
	
	          case 10:
	            return _context.abrupt('return', row._counter || 0);
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.updateRowById = exports.insertRow = undefined;
	
	var _extends2 = __webpack_require__(7);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _regenerator = __webpack_require__(2);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _keys = __webpack_require__(10);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _promise = __webpack_require__(1);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _asyncToGenerator2 = __webpack_require__(3);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _defineProperty2 = __webpack_require__(21);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _execute = __webpack_require__(9);
	
	var _execute2 = _interopRequireDefault(_execute);
	
	var _sqlInsert = __webpack_require__(22);
	
	var _sqlInsert2 = _interopRequireDefault(_sqlInsert);
	
	var _sqlUpdate = __webpack_require__(23);
	
	var _sqlUpdate2 = _interopRequireDefault(_sqlUpdate);
	
	var _findByQuery = __webpack_require__(18);
	
	var _findByQuery2 = _interopRequireDefault(_findByQuery);
	
	var _types = __webpack_require__(12);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var PRIMARY = _types2.default.PRIMARY;
	
	
	var saveReference = function saveReference(id, schema, connection, data) {
	  return id ? updateRowById(schema, connection, id, data) : insertRow(schema, connection, data);
	};
	
	var saveHasMany = function saveHasMany(hasManyField, connection, rowParent, row) {
	  var id = row.id;
	  var field = hasManyField.field;
	  var schema = hasManyField.schema;
	
	  var reference = (0, _assign2.default)({}, row, (0, _defineProperty3.default)({}, field, rowParent.id));
	  return saveReference(id, schema, connection, reference);
	};
	
	var persistHasMany = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(_ref2) {
	    var schema = _ref2.schema;
	    var connection = _ref2.connection;
	    var data = _ref2.data;
	    var rowParent = _ref2.rowParent;
	    var hasMany, references;
	    return _regenerator2.default.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            hasMany = schema.hasMany;
	            references = {};
	
	            if (hasMany) {
	              _context2.next = 4;
	              break;
	            }
	
	            return _context2.abrupt('return', references);
	
	          case 4:
	            _context2.next = 6;
	            return _promise2.default.all((0, _keys2.default)(hasMany).map(function () {
	              var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(field) {
	                var rows, hasManyField, saveHasManyRow;
	                return _regenerator2.default.wrap(function _callee$(_context) {
	                  while (1) {
	                    switch (_context.prev = _context.next) {
	                      case 0:
	                        rows = data[field] || [];
	                        hasManyField = hasMany[field];
	                        saveHasManyRow = saveHasMany.bind(undefined, hasManyField, connection, rowParent);
	                        _context.next = 5;
	                        return _promise2.default.all(rows.map(saveHasManyRow));
	
	                      case 5:
	                        references[field] = _context.sent;
	
	                      case 6:
	                      case 'end':
	                        return _context.stop();
	                    }
	                  }
	                }, _callee, undefined);
	              }));
	
	              return function (_x2) {
	                return _ref3.apply(this, arguments);
	              };
	            }()));
	
	          case 6:
	            return _context2.abrupt('return', references);
	
	          case 7:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined);
	  }));
	
	  return function persistHasMany(_x) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var getExtraData = function getExtraData(_ref4) {
	  var extraFields = _ref4.extraFields;
	  var schema = _ref4.schema;
	  var row = _ref4.row;
	
	  var extraData = {};
	
	  (0, _keys2.default)(extraFields).forEach(function (field) {
	    extraData[field] = row[field];
	    delete row[field];
	    delete schema.fields[field];
	  });
	
	  return extraData;
	};
	
	var mountSchemaMany = function mountSchemaMany(manyToManyField) {
	  var _Object$assign3;
	
	  var extraFields = manyToManyField.extraFields;
	  var parent = manyToManyField.parent;
	  var table = manyToManyField.table;
	  var reference = manyToManyField.reference;
	
	  return {
	    table: table,
	
	    fields: (0, _assign2.default)((_Object$assign3 = {
	      id: PRIMARY
	    }, (0, _defineProperty3.default)(_Object$assign3, parent, PRIMARY), (0, _defineProperty3.default)(_Object$assign3, reference, PRIMARY), _Object$assign3), extraFields)
	  };
	};
	
	var mountManyWhere = function mountManyWhere(_ref5, rowParent, rowSaved) {
	  var parent = _ref5.parent;
	  var reference = _ref5.reference;
	
	  var _ref6;
	
	  return _ref6 = {}, (0, _defineProperty3.default)(_ref6, parent, 'eq:' + rowParent.id), (0, _defineProperty3.default)(_ref6, reference, 'eq:' + rowSaved.id), _ref6;
	};
	
	var mountManyData = function mountManyData(_ref7, extraData, manyId, rowParent, rowSaved) {
	  var parent = _ref7.parent;
	  var reference = _ref7.reference;
	
	  var _Object$assign4;
	
	  return (0, _assign2.default)((_Object$assign4 = {
	    id: manyId
	  }, (0, _defineProperty3.default)(_Object$assign4, parent, rowParent.id), (0, _defineProperty3.default)(_Object$assign4, reference, rowSaved.id), _Object$assign4), extraData);
	};
	
	var getManyAttrs = function () {
	  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(manyToManyField, connection, rowParent, rowSaved) {
	    var manySchema, manyWhere, rows, manyRow, manyId;
	    return _regenerator2.default.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            manySchema = mountSchemaMany(manyToManyField);
	            manyWhere = mountManyWhere(manyToManyField, rowParent, rowSaved);
	            _context3.next = 4;
	            return (0, _findByQuery2.default)(manySchema, connection, manyWhere);
	
	          case 4:
	            rows = _context3.sent;
	            manyRow = rows.pop();
	            manyId = manyRow ? manyRow.id : undefined;
	            return _context3.abrupt('return', { manySchema: manySchema, manyId: manyId });
	
	          case 8:
	          case 'end':
	            return _context3.stop();
	        }
	      }
	    }, _callee3, undefined);
	  }));
	
	  return function getManyAttrs(_x3, _x4, _x5, _x6) {
	    return _ref8.apply(this, arguments);
	  };
	}();
	
	var cloneSchema = function cloneSchema(schema) {
	  var fields = (0, _extends3.default)({}, schema.fields);
	  return (0, _assign2.default)({}, schema, { fields: fields });
	};
	
	var mountManyReferences = function () {
	  var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(manyToManyField, connection, rowParent, row) {
	    var id, extraFields, schema, extraData, rowSaved, _ref10, manySchema, manyId, manyData;
	
	    return _regenerator2.default.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            id = row.id;
	            extraFields = manyToManyField.extraFields;
	            schema = cloneSchema(manyToManyField.schema);
	            extraData = getExtraData({ extraFields: extraFields, schema: schema, row: row });
	            _context4.next = 6;
	            return saveReference(id, schema, connection, row);
	
	          case 6:
	            rowSaved = _context4.sent;
	            _context4.next = 9;
	            return getManyAttrs(manyToManyField, connection, rowParent, rowSaved);
	
	          case 9:
	            _ref10 = _context4.sent;
	            manySchema = _ref10.manySchema;
	            manyId = _ref10.manyId;
	            manyData = mountManyData(manyToManyField, extraData, manyId, rowParent, rowSaved);
	            _context4.next = 15;
	            return saveReference(manyId, manySchema, connection, manyData);
	
	          case 15:
	            return _context4.abrupt('return', (0, _assign2.default)({}, rowSaved, extraData));
	
	          case 16:
	          case 'end':
	            return _context4.stop();
	        }
	      }
	    }, _callee4, undefined);
	  }));
	
	  return function mountManyReferences(_x7, _x8, _x9, _x10) {
	    return _ref9.apply(this, arguments);
	  };
	}();
	
	var persistManyToMany = function () {
	  var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(_ref12) {
	    var schema = _ref12.schema;
	    var connection = _ref12.connection;
	    var data = _ref12.data;
	    var rowParent = _ref12.rowParent;
	    var manyToMany, references;
	    return _regenerator2.default.wrap(function _callee6$(_context6) {
	      while (1) {
	        switch (_context6.prev = _context6.next) {
	          case 0:
	            manyToMany = schema.manyToMany;
	            references = {};
	
	            if (manyToMany) {
	              _context6.next = 4;
	              break;
	            }
	
	            return _context6.abrupt('return', references);
	
	          case 4:
	            _context6.next = 6;
	            return _promise2.default.all((0, _keys2.default)(manyToMany).map(function () {
	              var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(field) {
	                var rows, manyToManyField, manyToManySave;
	                return _regenerator2.default.wrap(function _callee5$(_context5) {
	                  while (1) {
	                    switch (_context5.prev = _context5.next) {
	                      case 0:
	                        rows = data[field] || [];
	                        manyToManyField = manyToMany[field];
	                        manyToManySave = mountManyReferences.bind(undefined, manyToManyField, connection, rowParent);
	                        _context5.next = 5;
	                        return _promise2.default.all(rows.map(manyToManySave));
	
	                      case 5:
	                        references[field] = _context5.sent;
	
	                      case 6:
	                      case 'end':
	                        return _context5.stop();
	                    }
	                  }
	                }, _callee5, undefined);
	              }));
	
	              return function (_x12) {
	                return _ref13.apply(this, arguments);
	              };
	            }()));
	
	          case 6:
	            return _context6.abrupt('return', references);
	
	          case 7:
	          case 'end':
	            return _context6.stop();
	        }
	      }
	    }, _callee6, undefined);
	  }));
	
	  return function persistManyToMany(_x11) {
	    return _ref11.apply(this, arguments);
	  };
	}();
	
	var persistReferences = function () {
	  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(refParams) {
	    var hasManyReferences, manyToManyReferences;
	    return _regenerator2.default.wrap(function _callee7$(_context7) {
	      while (1) {
	        switch (_context7.prev = _context7.next) {
	          case 0:
	            _context7.next = 2;
	            return persistHasMany(refParams);
	
	          case 2:
	            hasManyReferences = _context7.sent;
	            _context7.next = 5;
	            return persistManyToMany(refParams);
	
	          case 5:
	            manyToManyReferences = _context7.sent;
	            return _context7.abrupt('return', (0, _assign2.default)({}, hasManyReferences, manyToManyReferences));
	
	          case 7:
	          case 'end':
	            return _context7.stop();
	        }
	      }
	    }, _callee7, undefined);
	  }));
	
	  return function persistReferences(_x13) {
	    return _ref14.apply(this, arguments);
	  };
	}();
	
	var insertRow = exports.insertRow = function () {
	  var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(schema, connection, dataCreate) {
	    var data, sql, rows, rowInserted, references;
	    return _regenerator2.default.wrap(function _callee8$(_context8) {
	      while (1) {
	        switch (_context8.prev = _context8.next) {
	          case 0:
	            data = (0, _extends3.default)({}, dataCreate);
	            sql = (0, _sqlInsert2.default)((0, _assign2.default)({}, schema, { data: data }));
	
	            if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'CREATE') console.log(sql);
	            _context8.next = 5;
	            return (0, _execute2.default)(schema, connection, sql);
	
	          case 5:
	            rows = _context8.sent;
	            rowInserted = rows.pop();
	            _context8.next = 9;
	            return persistReferences({ schema: schema, connection: connection, data: data, rowParent: rowInserted });
	
	          case 9:
	            references = _context8.sent;
	            return _context8.abrupt('return', (0, _assign2.default)(rowInserted, references));
	
	          case 11:
	          case 'end':
	            return _context8.stop();
	        }
	      }
	    }, _callee8, undefined);
	  }));
	
	  return function insertRow(_x14, _x15, _x16) {
	    return _ref15.apply(this, arguments);
	  };
	}();
	
	var updateRowById = exports.updateRowById = function () {
	  var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(schema, connection, id, data) {
	    var where, sql, rows, rowUpdated, references;
	    return _regenerator2.default.wrap(function _callee9$(_context9) {
	      while (1) {
	        switch (_context9.prev = _context9.next) {
	          case 0:
	            where = [{ field: 'id', comparator: '=', value: id }];
	            sql = (0, _sqlUpdate2.default)((0, _assign2.default)({}, schema, { data: data, where: where }));
	
	            if (process.env.PG_DEBUG === true || process.env.PG_DEBUG === 'UPDATE') console.log(sql);
	            _context9.next = 5;
	            return (0, _execute2.default)(schema, connection, sql);
	
	          case 5:
	            rows = _context9.sent;
	            rowUpdated = rows.pop();
	            _context9.next = 9;
	            return persistReferences({ schema: schema, connection: connection, data: data, rowParent: rowUpdated });
	
	          case 9:
	            references = _context9.sent;
	            return _context9.abrupt('return', (0, _assign2.default)(rowUpdated, references));
	
	          case 11:
	          case 'end':
	            return _context9.stop();
	        }
	      }
	    }, _callee9, undefined);
	  }));
	
	  return function updateRowById(_x17, _x18, _x19, _x20) {
	    return _ref16.apply(this, arguments);
	  };
	}();

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/defineProperty");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _sqlUtils = __webpack_require__(15);
	
	var getListValues = function getListValues(_ref) {
	  var fields = _ref.fields;
	  var data = _ref.data;
	
	  var listFields = (0, _sqlUtils.getListFields)({ fields: fields, data: data });
	
	  var listValues = listFields.map(function (field) {
	    var value = data[field];
	    if (value === null) return 'null';
	    var isString = (0, _sqlUtils.columnIsString)(fields[field]);
	    return isString ? (0, _sqlUtils.forceString)(value) : value;
	  });
	
	  return {
	    listFields: listFields.join(', '),
	    listValues: listValues.join(', ')
	  };
	};
	
	var toSQL = function toSQL(_ref2) {
	  var table = _ref2.table;
	  var listFields = _ref2.listFields;
	  var listValues = _ref2.listValues;
	  var listReturning = _ref2.listReturning;
	  return ('\nINSERT INTO ' + table + ' (' + listFields + ')\n       VALUES (' + listValues + ')\n       RETURNING ' + listReturning + ';\n').trim();
	};
	
	exports.default = function (_ref3) {
	  var table = _ref3.table;
	  var fields = _ref3.fields;
	  var data = _ref3.data;
	
	  var listReturning = (0, _sqlUtils.getListReturning)({ fields: fields });
	
	  var _getListValues = getListValues({ fields: fields, data: data, listFields: listFields });
	
	  var listValues = _getListValues.listValues;
	  var listFields = _getListValues.listFields;
	
	  return toSQL({ table: table, listFields: listFields, listValues: listValues, listReturning: listReturning });
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _assign = __webpack_require__(6);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _sqlWhere = __webpack_require__(14);
	
	var _sqlWhere2 = _interopRequireDefault(_sqlWhere);
	
	var _sqlUtils = __webpack_require__(15);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var getListValues = function getListValues(_ref) {
	  var fields = _ref.fields;
	  var data = _ref.data;
	
	  var listFields = (0, _sqlUtils.getListFields)({ fields: fields, data: data });
	
	  return listFields.map(function (field) {
	    var value = data[field];
	    if (value === null) value = 'null';
	    if (data[field] !== null && (0, _sqlUtils.columnIsString)(fields[field])) value = (0, _sqlUtils.forceString)(value);
	    return field + ' = ' + value;
	  }).join(',' + _sqlUtils.breakLine + '      ');
	};
	
	var toSQL = function toSQL(_ref2) {
	  var table = _ref2.table;
	  var setters = _ref2.setters;
	  var conditional = _ref2.conditional;
	  var listReturning = _ref2.listReturning;
	  return ('\nUPDATE ' + table + '\n  SET ' + setters + '\n  ' + conditional + '\n  RETURNING ' + listReturning + ';\n').trim();
	};
	
	exports.default = function (schema) {
	  var select = (0, _sqlUtils.objToListFields)(schema);
	  var setters = getListValues(schema);
	  var listReturning = (0, _sqlUtils.getListReturning)(schema);
	  var conditional = (0, _sqlWhere2.default)((0, _assign2.default)({ select: select }, schema));
	  return toSQL((0, _assign2.default)({ setters: setters, conditional: conditional, listReturning: listReturning }, schema));
	};

/***/ }
/******/ ]);
//# sourceMappingURL=q-postgres.min.js.map